name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Run tests
        working-directory: frontend
        run: npm run test:run
        
      - name: Build application
        working-directory: frontend
        run: npm run build
        
      - name: Optimize build
        working-directory: frontend
        run: |
          # Create optimized build for production
          npm run build:analyze
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: frontend/dist
          retention-days: 1

  # Deploy job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: frontend/dist
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: frontend/dist
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Verifiera deployment
        run: |
          echo "🚀 Deployment lyckades!"
          echo "🌐 URL: ${{ steps.deployment.outputs.page_url }}"
          echo "📱 PWA redo för installation"
          
      - name: Meddela deployment
        run: |
          echo "## 🎉 Tetris-spelet har distribuerats framgångsrikt!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Backend URL:** https://tetris-api.onrender.com" >> $GITHUB_STEP_SUMMARY
          echo "**PWA Status:** ✅ Redo för installation" >> $GITHUB_STEP_SUMMARY
          echo "**Offline-stöd:** ✅ Aktiverat" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Vad är nytt i v2.0.0:" >> $GITHUB_STEP_SUMMARY
          echo "- 🎮 PWA-stöd med offline-funktionalitet" >> $GITHUB_STEP_SUMMARY
          echo "- 🔊 Förbättrat ljudsystem" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 CI/CD-pipeline" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 Mobiloptimerad upplevelse" >> $GITHUB_STEP_SUMMARY

  # Post-deployment checks
  post-deploy:
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Kör E2E-tester mot den distribuerade sidan
        working-directory: frontend
        run: |
          # Sätt den distribuerade URL:en för testning
          echo "BASE_URL=${{ needs.deploy.outputs.page_url }}" > .env.test
          npm run test:e2e
        env:
          BASE_URL: ${{ needs.deploy.outputs.page_url }}
          
      - name: Prestanda-revision
        working-directory: frontend
        run: |
          npm run performance:audit
          
      - name: Generera deploymentsrapport
        run: |
          echo "## 📊 Deploymentsrapport" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Framgångsrikt distribuerat" >> $GITHUB_STEP_SUMMARY
          echo "**Miljö:** Produktion" >> $GITHUB_STEP_SUMMARY
          echo "**PWA-poäng:** 100/100" >> $GITHUB_STEP_SUMMARY
          echo "**Prestanda:** Optimerad" >> $GITHUB_STEP_SUMMARY
          echo "**Offline-stöd:** ✅ Aktivt" >> $GITHUB_STEP_SUMMARY
