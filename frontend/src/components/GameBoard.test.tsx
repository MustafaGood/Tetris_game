import React from 'react';
import GameBoard from './GameBoard';
import { emptyGrid, Grid, collide, spawn, Bag, Piece, W, H } from '../tetris';

// Manual test documentation f√∂r r√∂relselogik
// Dessa tester ska k√∂ras manuellt i webbl√§saren

export const MovementTestSuite = {
  // Test 1: V√§nster vid v√§gg
  testLeftWallCollision: () => {
    const grid = emptyGrid();
    const piece: Piece = { id: 1, r: 0, x: 0, y: 0 }; // I-piece vid v√§nster v√§gg
    const result = collide(grid, piece);
    console.log('Test 1 - V√§nster vid v√§gg:', result ? 'PASS' : 'FAIL');
    return result === true;
  },

  // Test 2: H√∂ger vid v√§gg
  testRightWallCollision: () => {
    const grid = emptyGrid();
    const piece: Piece = { id: 1, r: 0, x: W - 4, y: 0 }; // I-piece vid h√∂ger v√§gg
    const result = collide(grid, piece);
    console.log('Test 2 - H√∂ger vid v√§gg:', result ? 'PASS' : 'FAIL');
    return result === true;
  },

  // Test 3: H√∂ger in i bricka
  testRightIntoBlock: () => {
    const grid = emptyGrid();
    grid[0][5] = 1; // Placera en bricka
    const piece: Piece = { id: 2, r: 0, x: 3, y: 0 }; // J-piece som krockar
    const result = collide(grid, piece);
    console.log('Test 3 - H√∂ger in i bricka:', result ? 'PASS' : 'FAIL');
    return result === true;
  },

  // Test 4: Giltig position
  testValidPosition: () => {
    const grid = emptyGrid();
    const piece: Piece = { id: 1, r: 0, x: 3, y: 0 }; // I-piece i mitten
    const result = collide(grid, piece);
    console.log('Test 4 - Giltig position:', !result ? 'PASS' : 'FAIL');
    return result === false;
  },

  // Test 5: Soft drop √∂kar y med 1
  testSoftDropMovement: () => {
    const grid = emptyGrid();
    const piece: Piece = { id: 1, r: 0, x: 3, y: 0 };
    const movedPiece = { ...piece, y: piece.y + 1 };
    const result = collide(grid, movedPiece);
    console.log('Test 5 - Soft drop r√∂relse:', !result ? 'PASS' : 'FAIL');
    return result === false;
  },

  // Test 6: Hard drop landar korrekt
  testHardDropLanding: () => {
    const grid = emptyGrid();
    const piece: Piece = { id: 1, r: 0, x: 3, y: 0 };
    let currentPiece = { ...piece };
    let dropDistance = 0;
    
    while (!collide(grid, { ...currentPiece, y: currentPiece.y + 1 })) {
      currentPiece.y++;
      dropDistance++;
    }
    
    const expectedDistance = H - 1;
    const result = dropDistance === expectedDistance;
    console.log('Test 6 - Hard drop landar korrekt:', result ? 'PASS' : 'FAIL');
    console.log(`  Drop distance: ${dropDistance}, Expected: ${expectedDistance}`);
    return result;
  },

  // Test 7: Spawn position
  testSpawnPosition: () => {
    const bag = new Bag();
    const piece = spawn(bag);
    const expectedX = Math.floor(W/2) - 2;
    const result = piece.x === expectedX && piece.y === 0 && piece.r === 0;
    console.log('Test 7 - Spawn position:', result ? 'PASS' : 'FAIL');
    console.log(`  Position: x=${piece.x}, y=${piece.y}, r=${piece.r}`);
    return result;
  },

  // Test 8: Alla tetromino-typer
  testAllTetrominoTypes: () => {
    const bag = new Bag();
    const spawnedTypes = new Set<number>();
    
    for (let i = 0; i < 50; i++) {
      const piece = spawn(bag);
      spawnedTypes.add(piece.id);
    }
    
    const result = spawnedTypes.size === 7;
    console.log('Test 8 - Alla tetromino-typer:', result ? 'PASS' : 'FAIL');
    console.log(`  Found types: ${Array.from(spawnedTypes).sort().join(', ')}`);
    return result;
  },

  // K√∂r alla tester
  runAllTests: () => {
    console.log('üöÄ K√∂rning av Movement Logic Tests...');
    console.log('=====================================');
    
    const tests = [
      MovementTestSuite.testLeftWallCollision,
      MovementTestSuite.testRightWallCollision,
      MovementTestSuite.testRightIntoBlock,
      MovementTestSuite.testValidPosition,
      MovementTestSuite.testSoftDropMovement,
      MovementTestSuite.testHardDropLanding,
      MovementTestSuite.testSpawnPosition,
      MovementTestSuite.testAllTetrominoTypes
    ];
    
    let passed = 0;
    let failed = 0;
    
    tests.forEach((test, index) => {
      try {
        const result = test();
        if (result) {
          passed++;
        } else {
          failed++;
        }
      } catch (error) {
        console.log(`Test ${index + 1} - ERROR:`, error);
        failed++;
      }
    });
    
    console.log('=====================================');
    console.log(`üìä Resultat: ${passed} PASS, ${failed} FAIL`);
    console.log(`‚úÖ Success rate: ${((passed / (passed + failed)) * 100).toFixed(1)}%`);
    
    return { passed, failed };
  }
};

// Manual test instructions
export const ManualTestInstructions = {
  title: 'üß™ Manual Testing Instructions',
  
  keyboardControls: `
    Kontrollera att f√∂ljande tangentbordskontroller fungerar:
    
    ‚Üê V√§nster: Pj√§s flyttas v√§nster (blockeras vid v√§gg/bricka)
    ‚Üí H√∂ger: Pj√§s flyttas h√∂ger (blockeras vid v√§gg/bricka)
    ‚Üì Ned√•t: Soft drop (pj√§s faller snabbare)
    Space: Hard drop (pj√§s faller direkt ner)
    ‚Üë Upp√•t: Rotera pj√§s
    C: Hold pj√§s
    P/Esc: Pausa/Forts√§tt
    R: Starta om
  `,
  
  edgeCases: `
    Testa kantfall:
    
    1. Pj√§s vid v√§nster v√§gg - ska inte kunna g√• v√§nster
    2. Pj√§s vid h√∂ger v√§gg - ska inte kunna g√• h√∂ger
    3. Pj√§s bredvid v√§gg - ska kunna r√∂ra sig √•t andra h√•llet
    4. Pj√§s ovan brickor - ska kunna r√∂ra sig v√§nster/h√∂ger
    5. Pj√§s vid botten - ska l√•sas p√• plats
    6. Snabb tangenttryckning - ska inte orsaka problem
    7. H√•llen tangent - ska ha throttling
  `,
  
  visualChecks: `
    Visuella kontroller:
    
    1. Pj√§ser renderas korrekt med r√§tt f√§rger
    2. R√∂relse √§r smidig utan lagg
    3. Kollisioner visas tydligt
    4. Next pieces visas korrekt
    5. Hold-funktion fungerar visuellt
    6. Po√§ng uppdateras vid hard drop
    7. Game over visas korrekt
  `,
  
  runTests: () => {
    console.log(ManualTestInstructions.title);
    console.log(ManualTestInstructions.keyboardControls);
    console.log(ManualTestInstructions.edgeCases);
    console.log(ManualTestInstructions.visualChecks);
    
    // K√∂r automatiska tester
    MovementTestSuite.runAllTests();
  }
};

// Exportera f√∂r anv√§ndning i utvecklingsl√§ge
if (typeof window !== 'undefined') {
  (window as any).TetrisTests = {
    MovementTestSuite,
    ManualTestInstructions
  };
  
  console.log('üß™ Tetris test suite loaded!');
  console.log('K√∂r window.TetrisTests.MovementTestSuite.runAllTests() f√∂r automatiska tester');
  console.log('K√∂r window.TetrisTests.ManualTestInstructions.runTests() f√∂r manual tester');
}
